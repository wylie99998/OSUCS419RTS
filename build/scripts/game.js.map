{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/levels/NorthKingdom.js",
    "src/prefabs/NPC01.js",
    "src/prefabs/Player.js",
    "src/prefabs/PlayerUnit.js",
    "src/states/Battle.js",
    "src/states/Boot.js",
    "src/states/Preload.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import Boot from 'states/Boot';\nimport Preload from 'states/Preload';\nimport Battle from 'states/Battle';\nimport NorthKingdom from 'levels/NorthKingdom';\n\nclass Game extends Phaser.Game {\n\n\tconstructor() {\n\t\tsuper(960, 640, Phaser.AUTO, 'content', null);\n\t\tthis.state.add('Boot', Boot, false);\n\t\tthis.state.add('Preload', Preload, false);\n\t\tthis.state.add('Battle', Battle, false);\n\t\tthis.state.add('NorthKingdom', NorthKingdom, false);\n\t\tthis.state.start('Boot');\n\t}\n}\n\nnew Game();\n",
    "import Player from 'prefabs/Player';\nimport NPC01 from 'prefabs/NPC01';\n\nexport default class NorthKingdom extends Phaser.State {\n\tpreload() {\n\t\tthis.load.spritesheet('npc01', \"assets/spritesheets/npc01.png\", 64, 64, 178);\n\t\tthis.load.text('dialogue', 'assets/dialogue/NPC01.json');\n\t\tthis.load.text('characters', 'assets/characters.json');\n\t}\n\tcreate() {\n        // add map\n\t\tthis.map = this.add.tilemap('north_kingdom');\n\t\tthis.map.addTilesetImage('Tiny16', 'tiles');\n\n\t\t// add layers from map\n\t\tthis.backgroundLayer = this.map.createLayer('backgroundLayer');\n        this.backgroundLayer.scale.setTo(3.5, 3.5);\n        this.backgroundLayer.resizeWorld();\n\t\tthis.backgroundLayer.smoothed = false;\n\n        this.blockedLayer = this.map.createLayer('blockedLayer');\n\t\tthis.map.setCollisionBetween(1, 256, true, 'blockedLayer');\n\t\tthis.blockedLayer.setScale(3.5, 3.5);\n        this.blockedLayer.resizeWorld();\n        this.blockedLayer.smoothed = false;\n\n        this.borderLayer = this.map.createLayer('borderLayer');\n        this.borderLayer.scale.setTo(3.5, 3.5);\n        this.borderLayer.resizeWorld();\n        this.borderLayer.smoothed = false;\n\n        // add player\n\t\tthis.player = new Player(this.game);\n\t\tthis.add.existing(this.player);\n\t\tthis.player.position.x = 1400;\n\t\tthis.player.position.y = 600; // reset back to 1400\n\n\t\t// add npc\n\t\tthis.npc01 = new NPC01(this.game);\n\t\tthis.add.existing(this.npc01);\n\t}\n    update() {\n        this.game.physics.arcade.collide(this.player, this.blockedLayer);\n    }\n}\n",
    "export default class NPC01 extends Phaser.Sprite {\n    constructor(game) {\n        super(game, 1400, 500, 'npc01', 26);\n\n        // enable interaction with player\n        this.scale.setTo(1.1);\n        this.inputEnabled = true;\n        this.events.onInputDown.add(this.startDialogue, this);\n    }\n    startDialogue() {\n        this.game.dialogue = JSON.parse(this.game.cache.getText('dialogue'));\n        this.totalCorrect = 0;\n        this.party = [];\n        this.id = this.game.dialogue.start;\n        this.showDialogue(this.game.dialogue, this.id);\n    }\n    showDialogue(dialogue, id) {\n        let x = 20, y = 350;\n\n        // show question\n        let question = dialogue['elements'][id].npc;\n        this.style = {\n            font: \"22px Arial\",\n            fill: \"white\",\n            align: \"center\",\n            backgroundColor: \"000\"\n        };\n        this.question = this.game.add.text (\n            this.game.world.centerX+x, y, question, this.style\n        );\n\n        // show answers and add input to click\n        let answers = dialogue['elements'][id].character;\n        this.answers_set = [];\n        for (var i in answers) {\n            this.answers_set[i] = this.game.add.text (\n                this.game.world.centerX+x, y+=60, answers[i][i], this.style\n            );\n            this.answers_set[i].inputEnabled = true;\n            this.answers_set[i].events.onInputDown.add(this.checkAnswer, this)\n        }\n    }\n    checkAnswer(selected) {\n        let selectedAnswer = selected.text;\n        let correctAnswer = this.game.dialogue['elements'][this.id].correct;\n        if (selectedAnswer == correctAnswer) {\n            this.assignParty();\n        } else {\n            console.log(\"You got it wrong...\");\n        }\n        this.updateDialogue();\n    }\n    updateDialogue() {\n        // update id to point to next question\n        this.id = this.game.dialogue['elements'][this.id].followup;\n        if (this.id == \"\") {\n            this.startBattle(this.party);\n        }\n\n        // remove question and answers from game\n        this.question.destroy();\n        this.answers_set.forEach(function(answer) { answer.destroy() });\n        this.showDialogue(this.game.dialogue, this.id);\n    }\n    assignParty() {\n        this.party.push({ name: 'thief' });\n    }\n    startBattle(party) {\n        this.game.dialogue = JSON.parse(this.game.cache.getText('dialogue'));\n        this.game.state.start('Battle', true, false, party)\n    }\n}\n",
    "export default class Player extends Phaser.Sprite {\n    constructor(game) {\n        super(game, 0, 0, 'hero');\n\n        // enable physics for the player\n        this.game.physics.arcade.enableBody(this);\n        this.scale.setTo(1.1);\n        this.body.collideWorldBounds = true;\n        this.game.physics.arcade.enable(this);\n\n        // camera follows player\n        this.game.camera.follow(this);\n\n        // walking animations for the player\n        this.animations.add(\"walk-left\", [117, 118, 119, 120, 121, 122, 123, 124, 125], 8, true);\n        this.animations.add(\"walk-right\", [143, 144, 145, 146, 147, 148, 149, 150, 151], 8, true);\n        this.animations.add(\"walk-up\", [104, 105, 106, 107, 108, 109, 110, 111, 112], 8, true);\n        this.animations.add(\"walk-down\", [130, 131, 132, 133, 134, 135, 136, 137, 138,], 8, true);\n\n        // create control inputs for player\n        this.cursors = this.game.input.keyboard.createCursorKeys();\n    }\n    update() {\n        this.body.velocity.x = 0;\n        this.body.velocity.y = 0;\n\n        // player moves in specified direction or stands still\n        if (this.cursors.left.isDown) {\n            this.animations.play(\"walk-left\");\n            this.body.velocity.x =- 180;\n        } else if (this.cursors.right.isDown) {\n            this.animations.play(\"walk-right\");\n            this.body.velocity.x =+ 180;\n        } else {\n            this.body.velocity.x = 0;\n        }\n        if (this.cursors.up.isDown) {\n            this.animations.play(\"walk-up\");\n            this.body.velocity.y =- 180;\n        } else if (this.cursors.down.isDown) {\n            this.animations.play(\"walk-down\");\n            this.body.velocity.y =+ 180;\n        } else {\n            this.body.velocity.y = 0;\n        }\n        if (this.body.velocity.x === 0 && this.body.velocity.y === 0) {\n            this.animations.stop();\n        }\n    }\n}\n",
    "export default class PlayerUnit extends Phaser.Sprite {\n    constructor(game, x, y, asset, stats) {\n        super(game, x, y, asset, stats, 0);\n        this.scale.setTo(1.2);\n        this.smoothed = false;\n        this.inputEnabled = true;\n\n        this.animations.add(\"attack\", [0, 1, 2, 3, 4, 5, 0], 8, false);\n        this.animations.play(\"attack\");\n        this.attack = stats.attack;\n        this.defense = stats.defense;\n        this.health = stats.health;\n    }\n}\n",
    "import PlayerUnit from 'prefabs/PlayerUnit';\n\nexport default class Battle extends Phaser.State {\n    init(party) {\n        this.game.party = party;\n    }\n    preload() {\n        var assets = this.game.party;\n        var assets_data = JSON.parse(this.cache.getText('characters'));\n\n        // load characters in party\n        for (var character in assets) {\n            this.load.spritesheet (\n                assets[character].name,\n                assets_data.assets[assets[character].name].source,\n                assets_data.assets[assets[character].name].width,\n                assets_data.assets[assets[character].name].height, 12\n            );\n        }\n        this.load.spritesheet (\n            'ultimate_defender',\n            assets_data.assets['ultimate_defender'].source,\n            assets_data.assets['ultimate_defender'].width,\n            assets_data.assets['ultimate_defender'].height, 12\n\n        );\n    }\n    create() {\n        // create the map\n        this.map = this.add.tilemap('battle');\n        this.map.addTilesetImage('Tiny16', 'tiles');\n        this.backgroundLayer = this.map.createLayer('backgroundLayer');\n\n        // create characters in party\n        var assets = this.game.party;\n        var assets_data = JSON.parse(this.cache.getText('characters'));\n        var prefabs = [];\n        for (var character in assets) {\n            this.character = new PlayerUnit (\n                this.game,\n                assets_data.prefabs[assets[character].name].position.x,\n                assets_data.prefabs[assets[character].name].position.y+=100,\n                assets[character].name,\n                assets_data.prefabs[assets[character].name].properties.stats\n            );\n            prefabs.push(this.character);\n            this.add.existing(this.character);\n        }\n        delete(this.character);\n\n        // create opponent's party\n        for (var character in assets) {\n            this.character = new PlayerUnit (\n                this.game,\n                assets_data.prefabs['ultimate_defender'].position.x,\n                assets_data.prefabs['ultimate_defender'].position.y+=100,\n                'ultimate_defender',\n                assets_data.prefabs['ultimate_defender'].properties.stats\n            );\n            prefabs.push(this.character);\n            this.add.existing(this.character);\n        }\n        delete(this.character);\n\n        this.whoseTurn(prefabs);\n        //this.whoseTurn = this.sara.name;\n\n        //this.ultimate_defender.events.onInputDown.add(this.effect, this);\n    }\n    whoseTurn(prefabs) {\n        this.current_unit = prefabs.shift();\n        //this.attack(this.current_unit);\n        console.log(prefabs);\n        //prefabs.events.onInputDown.add(this.attack, this)\n    }\n    attack() {\n        console.log(this)\n    }\n    update() {\n\n    }\n    effect() {\n        console.log('hit')\n    }\n}\n",
    "export default class Boot extends Phaser.State {\n\tpreload() {\n\t\tthis.load.image('splash', 'assets/images/splash.jpg');\n\t}\n\tcreate() {\n\t\tthis.physics.startSystem(Phaser.Physics.ARCADE);\n\t\tthis.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\n\t\tthis.game.state.start('Preload');\n\t}\n}\n",
    "export default class Preload extends Phaser.State {\n    preload() {\n        this.load.tilemap('north_kingdom', 'assets/tilemaps/north_kingdom.json', null, Phaser.Tilemap.TILED_JSON);\n        this.load.tilemap('battle', 'assets/tilemaps/battle.json', null, Phaser.Tilemap.TILED_JSON);\n        this.load.image('tiles', 'assets/spritesheets/Tiny16.png');\n        this.load.spritesheet('hero', \"assets/spritesheets/hero.png\", 64, 64, 178);\n    }\n    create() {\n        this.image = this.add.sprite(0, 0, 'splash');\n        this.image.scale.setTo(0.9, 0.63);\n        this.image.inputEnabled = true;\n        this.image.events.onInputDown.add(this.startGame, this);\n    }\n    startGame() {\n        this.state.start('NorthKingdom');\n    }\n}\n"
  ]
}